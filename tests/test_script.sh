#!/bin/bash

#  Copyright (C) 2022 Texas Instruments Incorporated - http://www.ti.com/
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#    Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
#
#    Neither the name of Texas Instruments Incorporated nor the names of
#    its contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

<< DESCRIPTION
This script provides support to test EdgeAI GST Apps using different combination
of input, output and model(s)

Following are some of it's features:
* Allow users to select from list of inputs and outputs to run test on
* Specify a filter for the models to be tested
* Select between Python, C++ or Optiflow or all three
* Parse the logs generated by the gst application
DESCRIPTION


usage() {
	cat <<- EOF
    Usage:
        ./test_script.sh
            --test_suite=*test-suite* (should start with 'PY' or 'CPP' or 'OPTIFLOW' or 'ALL')
            --input=[video|camera_usb|camera_rpi|camera_ov5640|camera_imx390|image] (Default=video)
            --output=[display|fakesink|save_as_video|save_as_image|remote_streaming] (Default=display)
            --model_filter=*model-filter* (Ex: TVM, ONR-OD-8200, SS,etc....) (Default=all models under /opt/model_zoo)
            --parse_log=[true|false] (Default=true)
            --timeout=*test runtime in secs* (Default=30)
	EOF
}

topdir=$EDGEAI_GST_APPS_PATH
timeout=30
test_suite=""
input=""
output=""
model_filter=""
parse_log=""
config_file="$topdir/tests/test_config.yaml"
parse_script="$topdir/tests/parse_log_data.py"

#Parse command line args
while [ $# -gt 0 ]; do
        case "$1" in
        --test_suite=*)
        test_suite="${1#*=}"
        ;;
        --input=*)
        input="${1#*=}"
        ;;
        --output=*)
        output="${1#*=}"
        ;;
        --model_filter=*)
        model_filter="${1#*=}"
        ;;
        --parse_log=*)
        parse_log="${1#*=}"
        ;;
        --timeout=*)
        timeout="${1#*=}"
        ;;
        --help)
        echo "command line arguments to the scripts:"
        usage
        exit
        ;;
        *)
        echo "Error: Invalid argument $1 !!"
        usage
        exit
        ;;
        esac
        shift
done

test_suite_array=()
# Verify appropriate test_suite
if [[ "$test_suite" = "PY"* ]]; then
    test_suite_array+=("$test_suite")
elif [[ "$test_suite" = "CPP"* ]]; then
    test_suite_array+=("$test_suite")
elif [[ "$test_suite" = "OPTIFLOW"* ]]; then
    test_suite_array+=("$test_suite")
elif [[ "$test_suite" = "ALL"* ]]; then
    test_suite_array+=("OPTIFLOW-TEST" "PYTHON-TEST" "CPP-TEST")
else
    echo "FAIL - Invalid test suite."
    usage
    exit 1
fi

# Verify appropriate input and output
if [[ "$input" == "" ]]; then
    echo "WARN - No Input specified, defaulting to "video""
    input="video"
elif [[ $input != @("camera_usb"|"camera_rpi"|"camera_ov5640"|"camera_imx390"|"video"|"image") ]]; then
    echo "FAIL - Invalid input specified"
    usage
    exit 1
fi

if [[ "$output" == "" ]]; then
    echo "WARN - No Output specified, defaulting to "display""
    output="display"
elif [[ $output != @("display"|"fakesink"|"save_as_video"|"save_as_image"|"remote_streaming") ]]; then
    echo "FAIL - Invalid output specified"
    usage
    exit 1
fi

# Verify optional parse_log
if [ "$parse_log" == "" ]; then
    parse_log="true"
elif [[ $parse_log != @("true"|"false") ]]; then
    echo "FAIL - Invalid parse_log $parse_log."
    usage
    exit 1
fi

if [ "$parse_log" == "false" ]; then
    parse_script="null"
fi

# Verify timeout
if ! [[ $timeout =~ ^[0-9]+([.][0-9]+)?$ ]]; then
    echo "FAIL - timeout is not an integer."
    usage
    exit 1
fi

# Set input, output in test_config file
sed -i "s@flow0:.*@flow0: [$input,dl_model,$output,[320,180,1280,720]] @" $config_file

# Verify model filter
if [ "$model_filter" == "" ]; then
    echo "WARN - No Model filter specified, using all under /opt/model_zoo"
    test_filter=""
else
    test_filter="grep $model_filter"
fi

failcount=0

for test_suite in "${test_suite_array[@]}"; do
    ./test_engine.sh $test_suite $config_file $timeout "$test_filter" $parse_script
    failcount=$((failcount + $?))
done

echo ""
if [ "$failcount" -ne "0" ]; then
    echo "[RESULT] $failcount test failed"
else
    echo "[RESULT] All test passed"
fi
echo ""